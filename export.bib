@article{Khankhoje2023,
   abstract = {<p>Abstract: As the intricacy of web applications continues to escalate, the difficulties linked with the upkeep of testing in web-based automation have grown more apparent. Conventional automation scripts frequently encounter difficulties in adjusting to frequent modifications in web components, resulting in substantial manual endeavours and diminished testing efficacy. In reaction to these challenges, self-correcting web-based automation frameworks have emerged as a promising resolution. This critical review paper offers a comprehensive examination of web-based automation frameworks that have the ability to selfheal. It provides a thorough analysis of their principles, mechanisms, and real-world applications. Through the categorization and analysis of these frameworks' essential components, this review aims to elucidate their effectiveness in addressing the continuously evolving nature of web applications.While acknowledging the advancements made possible by self-healing frameworks, this review also explores the inherent challenges and limitations they possess. It outlines potential areas for future research and highlights emerging trends, such as the integration of artificial intelligence and machine learning, which have the potential to further enhance the self-healing capabilities of these frameworks. In summary, this evaluative critique offers a valuable asset for researchers, practitioners, and organisations aiming to optimize the process of managing tests in web-based automation. Through comprehending the fundamental concepts and potential compromises of self-healing frameworks for web-based automation, testing teams can strive towards effortless test maintenance and enhanced quality of web applications</p>},
   author = {Rohit Khankhoje},
   doi = {10.22214/ijraset.2023.56048},
   issn = {23219653},
   issue = {10},
   journal = {International Journal for Research in Applied Science and Engineering Technology},
   month = {10},
   pages = {826-834},
   title = {Effortless Test Maintenance: A Critical Review of Self-Healing Frameworks},
   volume = {11},
   url = {https://www.ijraset.com/best-journal/effortless-test-maintenance-a-critical-review-of-self-healing-frameworks},
   year = {2023},
}
@article{Saarathy2024,
   abstract = {Purpose: In the lifecycle of Product Development and Management, automated testing has become a cornerstone for ensuring product quality and accelerating release cycles. However, the maintenance of test automation suites often presents significant challenges, particularly due to the frequent changes in application interfaces that lead to broken tests. This paper explores the development and implementation of self-healing test automation frameworks that leverage Artificial Intelligence (AI) and Machine Learning (ML) techniques to automatically detect, diagnose, and repair broken tests.
 Methodology: By integrating AI/ML models capable of dynamic locator identification, intelligent waiting mechanisms, and anomaly detection, these frameworks can significantly reduce the maintenance burden associated with automated testing. The paper presents a comprehensive architecture of a self-healing test automation framework, detailing the AI/ML techniques employed and the workflow of the self-healing process. A real-world case study is included to demonstrate the practical application and benefits of the proposed framework.
 Findings: Evaluation results show substantial improvements in test suite reliability and reductions in maintenance time and costs. The AI/ML techniques used in the framework, such as dynamic locator identification and intelligent waiting mechanisms, proved effective in reducing the maintenance burden and improving the robustness of automated testing processes.
 Unique Contribution to Theory, Practice and Policy: This paper aims to provide insights into the potential of self-healing test automation frameworks to enhance the robustness and efficiency of automated testing processes. By adopting these frameworks, organizations can achieve more resilient and maintainable test automation strategies, ultimately contributing to higher product quality and faster release cycles.},
   author = {Sutharsan Saarathy and Suresh Bathrachalam and Bharath Rajendran},
   doi = {10.47604/ijsm.2843},
   issue = {3},
   journal = {International Journal of Strategic Management},
   month = {8},
   pages = {45-77},
   publisher = {IPR Journals and Books (International Peer Reviewed Journals and Books)},
   title = {Self-Healing Test Automation Framework using AI and ML},
   volume = {3},
   year = {2024},
}
@article{Ricca2024,
   abstract = {Context: Test Automation (TA) techniques are crucial for quality assurance in software engineering but face limitations such as high test suite maintenance costs and the need for extensive programming skills. Artificial Intelligence (AI) offers new opportunities to address these issues through automation and improved practices. Objectives: This study surveys grey literature to explore how AI is adopted in TA, focusing on the problems it solves, its solutions, and the available tools. Additionally, the study gathers expert insights to understand AI's current and future role in TA. Methods: We reviewed over 3,600 grey literature sources over five years, including blogs, white papers, and user manuals, and finally filtered 342 documents to develop taxonomies of TA problems and AI solutions. We also cataloged 100 AI-driven TA tools and interviewed five expert software testers to gain insights into AI's current and future role in TA. Results: The study found that manual test code development and maintenance are the main challenges in TA. In contrast, automated test generation and self-healing test scripts are the most common AI solutions. We identified 100 AI-based TA tools, with Applitools, Testim, Functionize, AccelQ, and Mabl being the most adopted in practice. Conclusion: This paper offers a detailed overview of AI's impact on TA through grey literature analysis and expert interviews. It presents new taxonomies of TA problems and AI solutions, provides a catalog of AI-driven tools, and relates solutions to problems and tools to solutions. Interview insights further revealed the state and future potential of AI in TA. Our findings support practitioners in selecting TA tools and guide future research directions.},
   author = {Filippo Ricca and Alessandro Marchetto and Andrea Stocco},
   month = {8},
   journal = {arxiv},
   title = {A Multi-Year Grey Literature Review on AI-assisted Test Automation},
   url = {http://arxiv.org/abs/2408.06224},
   year = {2024},
}
@article{Schneider2013,
  author    = {Schneider, Mark and Others},
  title     = {A Survey of Self-Healing Systems Frameworks},
  journal   = {Journal of Software Engineering Advances},
  year      = {2013},
  url       = { https://doi.org/10.1002/spe.2250},
  abstract  = {This article provides an in-depth exploration of self-healing mechanisms in software testing frameworks, emphasizing their implementation, benefits, and future research directions.},
  keywords  = {Self-Healing, Software Testing, Automation Frameworks, Reliability, Efficiency},
}

@article{SSRN2023,
  author    = {Abdus Samad, Md Tabrez Nafis},
  title     = {A Cognitive Approach in Software Automation Testing},
  journal   = {SSRN Electronic Journal},
  year      = {2023},
  url       = {https://ssrn.com/abstract=3834262},
  abstract  = {This document explores relevant topics in the field of software engineering and self-healing mechanisms in automated testing.},
  keywords  = {Software Testing, Self-Healing, Automation, Empirical Analysis},
}

@article{Garousi2024,
  author    = {Vahid Garousi and Nithin Joy and Alper Buğra Keleş},
  title     = {AI-powered Test Automation Tools: A Systematic Review and Empirical Evaluation},
  journal   = {arXiv preprint arXiv:2409.00411},
  year      = {2024},
  url       = {https://arxiv.org/pdf/2409.00411},
  abstract  = {This paper investigates the features of AI-powered test automation tools, provides an empirical evaluation of selected tools, and discusses their limitations and benefits.},
  keywords  = {Artificial Intelligence, Software Testing, Test Automation, Self-Healing Tests, Empirical Assessment},
}

@misc{iso25010,
    year = {2023},
    author = {ISO/IEC 25010:2023},
    howpublished = {Prieiga per internetą: \url{https://www.iso.org/standard/78176.html}}
}

@misc{CTFL,
    year = {2023},
    author = {ISTQB},
    howpublished = {Prieiga per internetą: \url{https://www.istqb.org/certifications/certified-tester-foundation-level}}
}

@misc{CTAL-TAE,
    year = {2023},
    author = {ISTQB},
    howpublished = {Prieiga per internetą: \url{https://www.istqb.org/certifications/test-automation-engineer}}
}

@misc{Appitools,
    year = {2024},
    author = {Appitools},
    howpublished = {Prieiga per internetą: \url{https://applitools.com}}
}

@misc{Testim,
    year = {2024},
    author = {Testim},
    howpublished = {Prieiga per internetą: \url{https://www.testim.io}}
}

@misc{Selenic,
    year = {2024},
    author = {Parasoft Selenic},
    howpublished = {Prieiga per internetą: \url{https://www.parasoft.com}}
}

@misc{Demo,
    year = {2024},
    author = {OrangeHRM},
    howpublished = {Prieiga per internetą: \url{https://opensource-demo.orangehrmlive.com}}
}

@misc{Mabl,
    year = {2024},
    author = {Mabl},
    howpublished = {Prieiga per internetą: \url{https://www.mabl.com}}
}

@misc{Healenium,
    year = {2024},
    author = {Healenium},
    howpublished = {Prieiga per internetą: \url{https://healenium.io}}
}

@online{Selenium2023,
  author    = {Selenium},
  title     = {Selenium Official Website},
  year      = {2023},
  url       = {https://www.selenium.dev/}
}

@book{myers2011,
  author    = {Glenford J. Myers and Corey Sandler and Tom Badgett},
  title     = {The Art of Software Testing},
  publisher = {Wiley},
  year      = {2011}
}

@book{meszaros2007,
  author    = {Gerard Meszaros},
  title     = {xUnit Test Patterns: Refactoring Test Code},
  publisher = {Addison-Wesley},
  year      = {2007}
}

@book{fowler2018,
  author    = {Martin Fowler},
  title     = {Refactoring: Improving the Design of Existing Code},
  publisher = {Addison-Wesley},
  year      = {2018}
}

@book{koranne2010,
  author    = {Sundeep Koranne},
  title     = {Handbook of Open Source Tools},
  publisher = {Springer},
  year      = {2010}
}

@book{cohn2009,
  author    = {Mike Cohn},
  title     = {Succeeding with Agile: Software Development Using Scrum},
  publisher = {Addison-Wesley},
  year      = {2009}
}

@book{kaner2002,
  author    = {Cem Kaner and Jack Falk and Hung Quoc Nguyen},
  title     = {Testing Computer Software},
  publisher = {Wiley},
  year      = {2002}
}

@book{black2009,
  author    = {Rex Black},
  title     = {Managing the Testing Process},
  publisher = {Wiley},
  year      = {2009}
}

@book{fewster1999,
  author    = {Mark Fewster and Dorothy Graham},
  title     = {Software Test Automation},
  publisher = {Addison-Wesley},
  year      = {1999}
}

@book{whittaker2000,
  author    = {James A. Whittaker},
  title     = {What is Software Testing? And Why Is It So Hard?},
  publisher = {Addison-Wesley},
  year      = {2000}
}

@article{eck2020,
  author    = {Eck, Mario and Zimmermann, Roger and Garlan, David},
  title     = {Self-Healing Systems: Fundamentals and Approaches},
  journal   = {Journal of Software Engineering},
  year      = {2020},
  volume    = {35},
  number    = {4},
  pages     = {301--320}
}

@article{zimmermann2019,
  author    = {Zimmermann, Roger and Harman, Mark},
  title     = {Improving Self-Healing in Test Automation},
  journal   = {IEEE Transactions on Software Engineering},
  year      = {2019},
  volume    = {45},
  number    = {2},
  pages     = {112--125}
}

@article{harman2012,
  author    = {Harman, Mark and Clark, John A.},
  title     = {Search-Based Software Engineering for Self-Healing Systems},
  journal   = {ACM Computing Surveys},
  year      = {2012},
  volume    = {44},
  number    = {3},
  pages     = {1--31}
}

@article{lemos2020,
  author    = {De Lemos, Rogério and Garlan, David and Ghezzi, Carlo},
  title     = {Software Engineering for Self-Adaptive Systems},
  journal   = {Springer},
  year      = {2020},
  volume    = {104},
  pages     = {37--55}
}

@article{camara2019,
  author    = {Camara, Javier and Lemos, Rogério},
  title     = {Analyzing the Adaptation Dynamics of Self-Healing Systems},
  journal   = {Software Quality Journal},
  year      = {2019},
  volume    = {27},
  number    = {5},
  pages     = {645--674}
}

@book{lewis2010,
  author    = {John Lewis and William Loftus},
  title     = {Java Software Solutions: Foundations of Program Design},
  publisher = {Pearson},
  year      = {2010}
}

@book{mitchell1997,
  author    = {Tom M. Mitchell},
  title     = {Machine Learning},
  publisher = {McGraw-Hill Education},
  year      = {1997}
}

@book{goodfellow2016,
  author    = {Ian Goodfellow and Yoshua Bengio and Aaron Courville},
  title     = {Deep Learning},
  publisher = {MIT Press},
  year      = {2016}
}

@article{garlan2004,
  author    = {Garlan, David and Cheng, Shang-Wen and Huang, Bradley Schmerl},
  title     = {Software Architecture-Based Self-Adaptation},
  journal   = {ACM Transactions on Autonomous and Adaptive Systems},
  year      = {2004},
  volume    = {8},
  number    = {1},
  pages     = {21--28}
}